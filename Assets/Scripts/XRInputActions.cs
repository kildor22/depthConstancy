//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.1
//     from Assets/Scripts/XRInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @XRInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @XRInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""XRInputActions"",
    ""maps"": [
        {
            ""name"": ""Controllers"",
            ""id"": ""6895f61e-22ee-4204-a709-6ddcfaf461a6"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""0c3c8c18-a175-48f7-8f8f-d74bda435f4d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""aeeff6b2-27e6-4ae2-99fc-c2c9ee5790fc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScaleUp"",
                    ""type"": ""Button"",
                    ""id"": ""ae4f5d41-b2a5-4536-88c8-c4e34e6212d3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScaleDown"",
                    ""type"": ""Button"",
                    ""id"": ""7532eff1-d752-42d9-91c8-987273f49ca4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""65922637-6867-4932-b97e-fdf4e2353ccf"",
                    ""path"": ""<XRController>{RightHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScaleDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""41076ec7-439a-4452-a419-da064caf113a"",
                    ""path"": ""<XRController>{LeftHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScaleUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ccf3ee7c-82cc-46e6-a1bf-c21b85474b0a"",
                    ""path"": ""<XRController>{RightHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""781bc18e-8637-4aa8-b45f-455bc21be305"",
                    ""path"": ""<XRController>{LeftHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""add7c1c1-a844-45fd-be8e-04af6343a9dd"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2cb468ea-a5bb-4556-9581-05be25bb3cd4"",
                    ""path"": ""<XRController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Controllers
        m_Controllers = asset.FindActionMap("Controllers", throwIfNotFound: true);
        m_Controllers_Select = m_Controllers.FindAction("Select", throwIfNotFound: true);
        m_Controllers_Submit = m_Controllers.FindAction("Submit", throwIfNotFound: true);
        m_Controllers_ScaleUp = m_Controllers.FindAction("ScaleUp", throwIfNotFound: true);
        m_Controllers_ScaleDown = m_Controllers.FindAction("ScaleDown", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Controllers
    private readonly InputActionMap m_Controllers;
    private IControllersActions m_ControllersActionsCallbackInterface;
    private readonly InputAction m_Controllers_Select;
    private readonly InputAction m_Controllers_Submit;
    private readonly InputAction m_Controllers_ScaleUp;
    private readonly InputAction m_Controllers_ScaleDown;
    public struct ControllersActions
    {
        private @XRInputActions m_Wrapper;
        public ControllersActions(@XRInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_Controllers_Select;
        public InputAction @Submit => m_Wrapper.m_Controllers_Submit;
        public InputAction @ScaleUp => m_Wrapper.m_Controllers_ScaleUp;
        public InputAction @ScaleDown => m_Wrapper.m_Controllers_ScaleDown;
        public InputActionMap Get() { return m_Wrapper.m_Controllers; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControllersActions set) { return set.Get(); }
        public void SetCallbacks(IControllersActions instance)
        {
            if (m_Wrapper.m_ControllersActionsCallbackInterface != null)
            {
                @Select.started -= m_Wrapper.m_ControllersActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_ControllersActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_ControllersActionsCallbackInterface.OnSelect;
                @Submit.started -= m_Wrapper.m_ControllersActionsCallbackInterface.OnSubmit;
                @Submit.performed -= m_Wrapper.m_ControllersActionsCallbackInterface.OnSubmit;
                @Submit.canceled -= m_Wrapper.m_ControllersActionsCallbackInterface.OnSubmit;
                @ScaleUp.started -= m_Wrapper.m_ControllersActionsCallbackInterface.OnScaleUp;
                @ScaleUp.performed -= m_Wrapper.m_ControllersActionsCallbackInterface.OnScaleUp;
                @ScaleUp.canceled -= m_Wrapper.m_ControllersActionsCallbackInterface.OnScaleUp;
                @ScaleDown.started -= m_Wrapper.m_ControllersActionsCallbackInterface.OnScaleDown;
                @ScaleDown.performed -= m_Wrapper.m_ControllersActionsCallbackInterface.OnScaleDown;
                @ScaleDown.canceled -= m_Wrapper.m_ControllersActionsCallbackInterface.OnScaleDown;
            }
            m_Wrapper.m_ControllersActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @Submit.started += instance.OnSubmit;
                @Submit.performed += instance.OnSubmit;
                @Submit.canceled += instance.OnSubmit;
                @ScaleUp.started += instance.OnScaleUp;
                @ScaleUp.performed += instance.OnScaleUp;
                @ScaleUp.canceled += instance.OnScaleUp;
                @ScaleDown.started += instance.OnScaleDown;
                @ScaleDown.performed += instance.OnScaleDown;
                @ScaleDown.canceled += instance.OnScaleDown;
            }
        }
    }
    public ControllersActions @Controllers => new ControllersActions(this);
    public interface IControllersActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnSubmit(InputAction.CallbackContext context);
        void OnScaleUp(InputAction.CallbackContext context);
        void OnScaleDown(InputAction.CallbackContext context);
    }
}
